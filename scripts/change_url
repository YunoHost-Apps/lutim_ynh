#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

old_domain=$YNH_APP_OLD_DOMAIN
old_path=$YNH_APP_OLD_PATH

new_domain=$YNH_APP_NEW_DOMAIN
new_path=$YNH_APP_NEW_PATH

app=$YNH_APP_INSTANCE_NAME

#=================================================
# LOAD SETTINGS
#=================================================

final_path=$(ynh_app_setting_get $app final_path)
is_public=$(ynh_app_setting_get $app is_public)

#=================================================
# CHECK THE SYNTAX OF THE PATHS
#=================================================

test -n "$old_path" || old_path="/"
test -n "$new_path" || new_path="/"
new_path=$(ynh_normalize_url_path $new_path)
old_path=$(ynh_normalize_url_path $old_path)

#=================================================
# CHECK WHICH PARTS SHOULD BE CHANGED
#=================================================

change_domain=0
if [ "$old_domain" != "$new_domain" ]
then
	change_domain=1
fi

change_path=0
if [ "$old_path" != "$new_path" ]
then
	change_path=1
fi

#=================================================
# MANAGE FAILURE OF THE SCRIPT
#=================================================

ynh_clean_setup () {
# Nettoyage des résidus d'installation non pris en charge par le script remove.
	if test -n "$PID_TAIL"
	then
		SUPPRESS_WARNING kill -s 15 $PID_TAIL	# Arrête l'exécution de tail.
		ynh_secure_remove "$tempfile"
	fi
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# MODIFY URL IN NGINX CONF
#=================================================

nginx_conf_path=/etc/nginx/conf.d/$old_domain.d/$app.conf

# Change the path in the nginx config file
if [ $change_path -eq 1 ]
then
	# Make a backup of the original nginx config file if modified
	ynh_backup_if_checksum_is_different "$nginx_conf_path"

	# Replace locations starting with old_path
	# Look for every location possible patterns (see https://nginx.org/en/docs/http/ngx_http_core_module.html#location)
	ynh_replace_string "location\( \(=\|~\|~\*\|\^~\)\)\? $old_path" "location\1 $new_path"  "$nginx_conf_path"

	# Calculate and store the nginx config file checksum
	ynh_store_file_checksum "$nginx_conf_path"
fi

# Change the domain for nginx
if [ $change_domain -eq 1 ]
then
	# Delete file checksum for the old conf file location
	ynh_delete_file_checksum "$nginx_conf_path"
	mv $nginx_conf_path /etc/nginx/conf.d/$new_domain.d/$app.conf

	nginx_conf_path=/etc/nginx/conf.d/$new_domain.d/$app.conf
	# Calculate and store the nginx config file checksum
	ynh_store_file_checksum "$nginx_conf_path"
fi

#=================================================
# UPDATE SSOWAT
#=================================================

if [ $is_public -eq 0 ]
then	# Si l'app est privée, seul le visionnage des images reste public
	if [ "$new_path" == "/" ]; then
	    new_path=""	# Si path correspond à la racine, supprime le / pour éviter une erreur de la regex.
	fi
	# Modifie le domaine pour qu'il passe dans une regex
	domain_regex=$(echo "$new_domain" | sed 's@-@.@g')
	ynh_app_setting_set $app protected_regex "$domain_regex$new_path/stats$","$domain_regex$new_path/manifest.webapp$","$domain_regex$new_path/$","$domain_regex$new_path/d/.*$","$domain_regex$new_path/m/.*$"
fi

#=================================================
# SPECIFIC MODIFICATIONS
#=================================================
# REPLACE THE PATH IN THE CONFIG OF LUTIM
#=================================================

ynh_replace_string "\(^ *prefix.*=> '\).*" "\1$new_path'," "$final_path/lutim.conf"

#=================================================
# GENERIC FINALISATION
#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx

#=================================================
# START AND CHECK LUTIM BOOTING
#=================================================

tempfile="$(mktemp)"
tail -f -n1 /var/log/$app/production.log > "$tempfile" &	# Suit le démarrage dans le log
PID_TAIL=$!	# Récupère le PID de la commande tail, qui est passée en arrière plan.
systemctl restart $app	# Démarre lutim

for i in `seq 1 60`
do	# La boucle attend le démarrage de lutim. Ou 1 minute. Cette boucle évite simplement un 502 au début, car le démarrage est parfois long...
 	if grep -q "Manager.*started" "$tempfile"; then
		cat "$tempfile"
		WARNING echo "Le service $app a démarré correctement."
		break	# Si le log annonce le démarrage de lutim, sort de la boucle.
	fi
	WARNING echo -n "."
	sleep 1
done
echo ""
QUIET kill -s 15 $PID_TAIL	# Arrête l'exécution de tail.
ynh_secure_remove "$tempfile"
