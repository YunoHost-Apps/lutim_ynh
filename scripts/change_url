#!/bin/bash

#=================================================
# GENERIC STARTING
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# RETRIEVE ARGUMENTS
#=================================================

old_domain=$YNH_APP_OLD_DOMAIN
old_path=$YNH_APP_OLD_PATH

new_domain=$YNH_APP_NEW_DOMAIN
new_path=$YNH_APP_NEW_PATH

app=$YNH_APP_INSTANCE_NAME

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --weight=2

final_path=$(ynh_app_setting_get --app=$app --key=final_path)
port=$(ynh_app_setting_get --app=$app --key=port)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before changing its url (may take a while)..." --weight=20

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# Remove the new domain config file, the remove script won't do it as it doesn't know yet its location.
	ynh_secure_remove --file="/etc/nginx/conf.d/$new_domain.d/$app.conf"

	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# ACTIVATE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Activating maintenance mode..."

path_url=$old_path
domain=$old_domain
ynh_maintenance_mode_ON

#=================================================
# CHECK WHICH PARTS SHOULD BE CHANGED
#=================================================

change_domain=0
if [ "$old_domain" != "$new_domain" ]
then
	change_domain=1
fi

change_path=0
if [ "$old_path" != "$new_path" ]
then
	change_path=1
fi

#=================================================
# MANAGE FAILURE OF THE SCRIPT
#=================================================

ynh_clean_setup () {
# Clean installation remaining that are not handle by the remove script.
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# MODIFY URL IN NGINX CONF
#=================================================
ynh_script_progression --message="Updating nginx web server configuration..." --weight=2

nginx_conf_path=/etc/nginx/conf.d/$old_domain.d/$app.conf

# Change the path in the nginx config file
if [ $change_path -eq 1 ]
then
	# Make a backup of the original nginx config file if modified
	ynh_backup_if_checksum_is_different --file="$nginx_conf_path"

	# Set global variables for nginx helper
	domain="$old_domain"
	path_url="$new_path"

	# Create a dedicated nginx config
	ynh_add_nginx_config
fi

# Change the domain for nginx
if [ $change_domain -eq 1 ]
then
	# Delete file checksum for the old conf file location
	ynh_delete_file_checksum --file="$nginx_conf_path"
	mv $nginx_conf_path /etc/nginx/conf.d/$new_domain.d/$app.conf

	# Store file checksum for the new config file location
	ynh_store_file_checksum --file="/etc/nginx/conf.d/$new_domain.d/$app.conf"
fi

#=================================================
# UPDATE SSOWAT
#=================================================
ynh_script_progression --message="Reconfiguring SSOwat..."

if [ ! -z $(ynh_app_setting_get --app=$app --key=protected_regex) ] # Only user with a yunohost account can upload an image
then
	# If the app is private, viewing images stays publicly accessible.
	if [ "$new_path" == "/" ]; then
	    # If the path is /, clear it to prevent any error with the regex.
	    new_path=""
	fi
	# Modify the domain to be used in a regex
	domain_regex=$(echo "$new_domain" | sed 's@-@.@g')
 	ynh_app_setting_set  --app=$app --key=protected_regex --value="$domain_regex$new_path/stats/?$","$domain_regex$new_path/manifest.webapp/?$","$domain_regex$new_path/?$","$domain_regex$new_path/[d-m]/.*$"
fi

#=================================================
# SPECIFIC MODIFICATIONS
#=================================================
# REPLACE THE PATH IN THE CONFIG OF LUTIM
#=================================================

ynh_replace_string --match_string="\(^ *prefix.*=> '\).*" --replace_string="\1$new_path'," --target_file="$final_path/lutim.conf"

#=================================================
# GENERIC FINALISATION
#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# START AND CHECK LUTIM BOOTING
#=================================================
ynh_script_progression --message="Restarting Lutim..." --weight=3

# Wait for lutim to be fully started
ynh_systemd_action --action=restart --line_match="Manager.*started" --log_path="/var/log/$app/production.log" --timeout="120"

#=================================================
# DEACTIVE MAINTENANCE MODE
#=================================================
ynh_script_progression --message="Disabling maintenance mode..."

path_url=$old_path
domain=$old_domain
ynh_maintenance_mode_OFF

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Change of URL completed for $app" --last
